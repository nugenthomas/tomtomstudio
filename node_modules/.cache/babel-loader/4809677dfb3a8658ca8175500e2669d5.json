{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { ThemeProvider } from 'styled-components';\n// import ThemeContext from 'context/ThemeContext';\n// /**\n//  * Light/dark themes\n//  */\n// const themes = {\n//   light: {\n//     background: 'var(--light-bg-color)',\n//     titleColor: '#333',\n//     nav: {\n//       hoverCircle: '#ccc',\n//       background: '#ddd',\n//       icon: 'var(--dark-bg-color)',\n//     },\n//     dialog: {\n//       background: 'var(--light-bg-color)',\n//     },\n//   },\n//   dark: {\n//     background: 'var(--dark-bg-color)',\n//     titleColor: '#fff',\n//     nav: {\n//       hoverCircle: '#3c3c3c',\n//       background: '#4c4c4c',\n//       icon: '#fff',\n//     },\n//     dialog: {\n//       background: '#4c4c4c',\n//     },\n//   },\n// };\n// /**\n//  * Shared styles that we want accessible in the theme provider\n//  */\n// const shared = {\n//   borderRadius: '4px',\n//   fonts: {\n//     title: '\"Space Mono\", monospace',\n//     body: '\"Open Sans\", sans-serif',\n//   },\n//   colors: {\n//     primary: 'var(--primary)',\n//     secondary: 'var(--secondary)',\n//   },\n// };\n// function CustomThemeProvider({ children }) {\n//   const [mode, setMode] = useState(localStorage.getItem('mode') || 'light');\n//   useEffect(() => {\n//     document.querySelector('body').style.background = themes[mode].background;\n//   }, [mode]);\n//   return (\n//     <ThemeContext.Provider\n//       value={{\n//         setMode,\n//         mode,\n//         theme: themes[mode],\n//       }}\n//     >\n//       <ThemeProvider theme={{ mode, ...shared, ...themes[mode] }}>\n//         {children}\n//       </ThemeProvider>\n//     </ThemeContext.Provider>\n//   );\n// }\n// export default CustomThemeProvider;","map":{"version":3,"sources":["/Users/thomasnguyen/Documents/GitHub/react-portfolio/src/components/CustomThemeProvider.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { ThemeProvider } from 'styled-components';\n// import ThemeContext from 'context/ThemeContext';\n\n// /**\n//  * Light/dark themes\n//  */\n// const themes = {\n//   light: {\n//     background: 'var(--light-bg-color)',\n//     titleColor: '#333',\n//     nav: {\n//       hoverCircle: '#ccc',\n//       background: '#ddd',\n//       icon: 'var(--dark-bg-color)',\n//     },\n//     dialog: {\n//       background: 'var(--light-bg-color)',\n//     },\n//   },\n//   dark: {\n//     background: 'var(--dark-bg-color)',\n//     titleColor: '#fff',\n//     nav: {\n//       hoverCircle: '#3c3c3c',\n//       background: '#4c4c4c',\n//       icon: '#fff',\n//     },\n//     dialog: {\n//       background: '#4c4c4c',\n//     },\n//   },\n// };\n\n// /**\n//  * Shared styles that we want accessible in the theme provider\n//  */\n// const shared = {\n//   borderRadius: '4px',\n//   fonts: {\n//     title: '\"Space Mono\", monospace',\n//     body: '\"Open Sans\", sans-serif',\n//   },\n//   colors: {\n//     primary: 'var(--primary)',\n//     secondary: 'var(--secondary)',\n//   },\n// };\n\n// function CustomThemeProvider({ children }) {\n//   const [mode, setMode] = useState(localStorage.getItem('mode') || 'light');\n\n//   useEffect(() => {\n//     document.querySelector('body').style.background = themes[mode].background;\n//   }, [mode]);\n\n//   return (\n//     <ThemeContext.Provider\n//       value={{\n//         setMode,\n//         mode,\n//         theme: themes[mode],\n//       }}\n//     >\n//       <ThemeProvider theme={{ mode, ...shared, ...themes[mode] }}>\n//         {children}\n//       </ThemeProvider>\n//     </ThemeContext.Provider>\n//   );\n// }\n\n// export default CustomThemeProvider;\n"]},"metadata":{},"sourceType":"module"}