{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnguyen/Documents/GitHub/react-portfolio/src/components/work/WorkModal.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport ImageGallery from 'react-image-gallery';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useSpring, animated, config } from 'react-spring';\nimport { Transition } from 'react-spring/renderprops.cjs';\nimport media from 'styles/media';\nimport 'react-image-gallery/styles/css/image-gallery.css';\nimport './imageGalleryOverrides.css';\nimport Tag from 'components/styled/Tag';\nimport useCloseDialog from 'hooks/useCloseDialog';\nimport LoadingSpinner from './LoadingSpinner';\nconst Overlay = styled(animated.div)`\n  height: 100%;\n  left: 0;\n  position: fixed;\n  top: 0;\n  touch-action: none;\n  webkit-tap-highlight-color: transparent;\n  width: 100%;\n  z-index: 1;\n`;\nconst OverlayBackground = styled.div`\n  background: #2bc0e4; /* fallback for old browsers */\n  background: ${props => props.background};\n  height: 100%;\n  left: 0;\n  opacity: 0.95;\n  position: fixed;\n  top: 0;\n  touch-action: none;\n  webkit-tap-highlight-color: transparent;\n  width: 100%;\n  &::before {\n    background-color: ${props => props.theme.background};\n    content: '';\n    display: block;\n    height: 100%;\n    opacity: ${props => props.theme.mode === 'dark' ? 0.7 : 0};\n    position: absolute;\n    width: 100%;\n  }\n`;\nconst Container = styled.div`\n  display: grid;\n  grid-template-areas: \"info\" \"images\";\n  grid-template-columns: 100%;\n  position: relative;\n  ${media.tablet`\n    grid-template-areas: \"info\" \"images\";\n    grid-template-columns: 100%;\n    grid-template-rows: 40%;\n  `}\n  ${media.phone`\n    grid-template-areas: \"info\" \"images\";\n    grid-template-columns: 100%;\n    grid-template-rows: 40%;\n  `}\n`;\nconst ImagesContainer = styled(animated.div)`\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  grid-area: images;\n  \n   ${media.desktop`\n  width: 60%;\n  margin: auto;\n\n  `}\n  ${media.tablet`\n    width: 100%;\n  `}\n  ${media.phone`\n    width: 100%;\n  `}\n`;\nconst InfoContainer = styled.div`\n  align-items: center;\n  display: flex;\n  grid-area: info;\n  justify-content: center;\n`;\nconst TextContainer = styled(animated.div)`\n  color: white;\n  padding: 2em;\n  text-align: center;\n  width: 80%;\n\n  ${media.phone`\n    padding-top: 5em;\n  `}\n`;\nconst Title = styled.h2`\n  font-family: ${({\n  theme\n}) => theme.fonts.title};\n`;\nconst Info = styled.p`\n  font-family: ${({\n  theme\n}) => theme.fonts.body};\n`;\nconst Link = styled.a`\n  color: white;\n  text-decoration: none;\n  margin-right: 0.5em;\n  margin-left: 0.5em;\n  font-size: 1.6em;\n  transition: color 0.2s ease-in-out;\n  &:hover {\n    color: var(--dark-bg-color);\n  }\n`;\nconst ExitButton = styled(animated.div)`\n  color: white;\n  cursor: pointer;\n  font-size: 2em\n  margin: 1em;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 3;\n`;\nconst Tags = styled.p`\n  text-align: center;\n`;\n\nfunction WorkModal({\n  toggleModalOpen,\n  open,\n  project\n}) {\n  const [imagesLoaded, setImagesLoaded] = useState(false);\n  useCloseDialog({\n    open,\n    onClose: toggleModalOpen\n  });\n  useEffect(() => {\n    setImagesLoaded(false);\n  }, [project, open]);\n  const sharedSpringProps = {\n    immediate: open ? false : true,\n    opacity: open ? 1 : 0,\n    transform: open ? 'scale(1)' : 'scale(0.5)',\n    config: config.gentle\n  };\n  const textSpringProps = useSpring({ ...sharedSpringProps,\n    config: config.gentle\n  });\n  const imageSpringProps = useSpring({ ...sharedSpringProps,\n    config: config.default\n  });\n  const exitSpringProps = useSpring({ ...sharedSpringProps,\n    transform: open ? 'scale(1)' : 'scale(0)',\n    config: config.gentle\n  });\n  const onImageLoad = useCallback((() => {\n    let count = 0;\n    return () => {\n      count += 1;\n\n      if (count === project.images.length) {\n        setImagesLoaded(true);\n      }\n    };\n  })(), [project, open]);\n  return /*#__PURE__*/React.createElement(Transition, {\n    config: {\n      duration: 100\n    },\n    items: open,\n    from: {\n      opacity: 0\n    },\n    enter: {\n      opacity: 1\n    },\n    leave: {\n      opacity: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, open => open && (props => /*#__PURE__*/React.createElement(Overlay, {\n    style: { ...props\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(OverlayBackground, {\n    background: project.background,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ExitButton, {\n    onClick: toggleModalOpen,\n    style: exitSpringProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"times\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfoContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextContainer, {\n    style: textSpringProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 19\n    }\n  }, project.projectTitle), /*#__PURE__*/React.createElement(Info, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 19\n    }\n  }, project.projectInfo), /*#__PURE__*/React.createElement(Tags, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 19\n    }\n  }, project.tags.map((tag, index) => /*#__PURE__*/React.createElement(Tag, {\n    key: tag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 23\n    }\n  }, tag))))), /*#__PURE__*/React.createElement(ImagesContainer, {\n    style: imageSpringProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    loaded: imagesLoaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: imagesLoaded ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ImageGallery, {\n    onImageLoad: onImageLoad,\n    items: project.images,\n    showBullets: true,\n    showThumbnails: false,\n    showFullscreenButton: true,\n    showPlayButton: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 19\n    }\n  })))))));\n}\n\nWorkModal.propTypes = {\n  toggleModalOpen: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  project: PropTypes.object.isRequired\n};\nexport default WorkModal;","map":{"version":3,"sources":["/Users/thomasnguyen/Documents/GitHub/react-portfolio/src/components/work/WorkModal.js"],"names":["React","useState","useEffect","useCallback","PropTypes","styled","ImageGallery","FontAwesomeIcon","useSpring","animated","config","Transition","media","Tag","useCloseDialog","LoadingSpinner","Overlay","div","OverlayBackground","props","background","theme","mode","Container","tablet","phone","ImagesContainer","desktop","InfoContainer","TextContainer","Title","h2","fonts","title","Info","p","body","Link","a","ExitButton","Tags","WorkModal","toggleModalOpen","open","project","imagesLoaded","setImagesLoaded","onClose","sharedSpringProps","immediate","opacity","transform","gentle","textSpringProps","imageSpringProps","default","exitSpringProps","onImageLoad","count","images","length","duration","projectTitle","projectInfo","tags","map","tag","index","display","propTypes","func","isRequired","bool","object"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport ImageGallery from 'react-image-gallery';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useSpring, animated, config } from 'react-spring';\nimport { Transition } from 'react-spring/renderprops.cjs';\nimport media from 'styles/media';\nimport 'react-image-gallery/styles/css/image-gallery.css';\nimport './imageGalleryOverrides.css';\nimport Tag from 'components/styled/Tag';\nimport useCloseDialog from 'hooks/useCloseDialog';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst Overlay = styled(animated.div)`\n  height: 100%;\n  left: 0;\n  position: fixed;\n  top: 0;\n  touch-action: none;\n  webkit-tap-highlight-color: transparent;\n  width: 100%;\n  z-index: 1;\n`;\n\nconst OverlayBackground = styled.div`\n  background: #2bc0e4; /* fallback for old browsers */\n  background: ${props => props.background};\n  height: 100%;\n  left: 0;\n  opacity: 0.95;\n  position: fixed;\n  top: 0;\n  touch-action: none;\n  webkit-tap-highlight-color: transparent;\n  width: 100%;\n  &::before {\n    background-color: ${props => props.theme.background};\n    content: '';\n    display: block;\n    height: 100%;\n    opacity: ${props => (props.theme.mode === 'dark' ? 0.7 : 0)};\n    position: absolute;\n    width: 100%;\n  }\n`;\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-areas: \"info\" \"images\";\n  grid-template-columns: 100%;\n  position: relative;\n  ${media.tablet`\n    grid-template-areas: \"info\" \"images\";\n    grid-template-columns: 100%;\n    grid-template-rows: 40%;\n  `}\n  ${media.phone`\n    grid-template-areas: \"info\" \"images\";\n    grid-template-columns: 100%;\n    grid-template-rows: 40%;\n  `}\n`;\n\nconst ImagesContainer = styled(animated.div)`\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  grid-area: images;\n  \n   ${media.desktop`\n  width: 60%;\n  margin: auto;\n\n  `}\n  ${media.tablet`\n    width: 100%;\n  `}\n  ${media.phone`\n    width: 100%;\n  `}\n`;\n\nconst InfoContainer = styled.div`\n  align-items: center;\n  display: flex;\n  grid-area: info;\n  justify-content: center;\n`;\n\nconst TextContainer = styled(animated.div)`\n  color: white;\n  padding: 2em;\n  text-align: center;\n  width: 80%;\n\n  ${media.phone`\n    padding-top: 5em;\n  `}\n`;\n\nconst Title = styled.h2`\n  font-family: ${({ theme }) => theme.fonts.title};\n`;\n\nconst Info = styled.p`\n  font-family: ${({ theme }) => theme.fonts.body};\n`;\n\n\nconst Link = styled.a`\n  color: white;\n  text-decoration: none;\n  margin-right: 0.5em;\n  margin-left: 0.5em;\n  font-size: 1.6em;\n  transition: color 0.2s ease-in-out;\n  &:hover {\n    color: var(--dark-bg-color);\n  }\n`;\n\nconst ExitButton = styled(animated.div)`\n  color: white;\n  cursor: pointer;\n  font-size: 2em\n  margin: 1em;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 3;\n`;\n\nconst Tags = styled.p`\n  text-align: center;\n`;\n\nfunction WorkModal({ toggleModalOpen, open, project }) {\n  const [imagesLoaded, setImagesLoaded] = useState(false);\n  useCloseDialog({ open, onClose: toggleModalOpen });\n\n  useEffect(() => {\n    setImagesLoaded(false);\n  }, [project, open]);\n\n  const sharedSpringProps = {\n    immediate: open ? false : true,\n    opacity: open ? 1 : 0,\n    transform: open ? 'scale(1)' : 'scale(0.5)',\n    config: config.gentle,\n  };\n\n  const textSpringProps = useSpring({\n    ...sharedSpringProps,\n    config: config.gentle,\n  });\n\n  const imageSpringProps = useSpring({\n    ...sharedSpringProps,\n    config: config.default,\n  });\n\n  const exitSpringProps = useSpring({\n    ...sharedSpringProps,\n    transform: open ? 'scale(1)' : 'scale(0)',\n    config: config.gentle,\n  });\n\n  const onImageLoad = useCallback(\n    (() => {\n      let count = 0;\n      return () => {\n        count += 1;\n        if (count === project.images.length) {\n          setImagesLoaded(true);\n        }\n      };\n    })(),\n    [project, open],\n  );\n\n  return (\n    <Transition\n      config={{ duration: 100 }}\n      items={open}\n      from={{ opacity: 0 }}\n      enter={{ opacity: 1 }}\n      leave={{ opacity: 0 }}\n    >\n      {open =>\n        open &&\n        (props => (\n          <Overlay style={{ ...props }}>\n            <OverlayBackground background={project.background} />\n            <ExitButton onClick={toggleModalOpen} style={exitSpringProps}>\n              <FontAwesomeIcon icon=\"times\" />\n            </ExitButton>\n            <Container>\n              <InfoContainer>\n                <TextContainer style={textSpringProps}>\n                  <Title>{project.projectTitle}</Title>\n                  <Info>{project.projectInfo}</Info>\n                  <Tags>\n                    {project.tags.map((tag, index) => (\n                      <Tag key={tag}>{tag}</Tag>\n                    ))}\n                  </Tags>\n                </TextContainer>\n              </InfoContainer>\n              <ImagesContainer style={imageSpringProps}>\n                <LoadingSpinner loaded={imagesLoaded} />\n                <div\n                  style={{\n                    display: imagesLoaded ? 'block' : 'none',\n                  }}\n                >\n                  <ImageGallery\n                    onImageLoad={onImageLoad}\n                    items={project.images}\n                    showBullets={true}\n                    showThumbnails={false}\n                    showFullscreenButton={true}\n                    showPlayButton={false}\n                  />\n                </div>\n              </ImagesContainer>\n            </Container>\n          </Overlay>\n        ))\n      }\n    </Transition>\n  );\n}\n\nWorkModal.propTypes = {\n  toggleModalOpen: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  project: PropTypes.object.isRequired,\n};\n\nexport default WorkModal;\n"]},"metadata":{},"sourceType":"module"}