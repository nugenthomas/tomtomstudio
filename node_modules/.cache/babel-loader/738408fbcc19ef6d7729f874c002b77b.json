{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnguyen/Documents/GitHub/react-portfolio/src/components/CustomThemeProvider.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport ThemeContext from 'context/ThemeContext';\n/**\n * Light/dark themes\n */\n\nconst themes = {\n  light: {\n    background: 'var(--light-bg-color)',\n    titleColor: '#333',\n    nav: {\n      hoverCircle: '#ccc',\n      background: '#ddd',\n      icon: 'var(--dark-bg-color)'\n    },\n    dialog: {\n      background: 'var(--light-bg-color)'\n    }\n  },\n  dark: {\n    background: 'var(--dark-bg-color)',\n    titleColor: '#fff',\n    nav: {\n      hoverCircle: '#3c3c3c',\n      background: '#4c4c4c',\n      icon: '#fff'\n    },\n    dialog: {\n      background: '#4c4c4c'\n    }\n  }\n};\n/**\n * Shared styles that we want accessible in the theme provider\n */\n\nconst shared = {\n  borderRadius: '4px',\n  fonts: {\n    title: '\"Space Mono\", monospace',\n    body: '\"Open Sans\", sans-serif'\n  },\n  colors: {\n    primary: 'var(--primary)',\n    secondary: 'var(--secondary)'\n  }\n};\n\nfunction CustomThemeProvider({\n  children\n}) {\n  const [mode, setMode] = useState(localStorage.getItem('mode') || 'light');\n  useEffect(() => {\n    document.querySelector('body').style.background = themes[mode].background;\n  }, [mode]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      setMode,\n      mode,\n      theme: themes[mode]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: {\n      mode,\n      ...shared,\n      ...themes[mode]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, children));\n}\n\nexport default CustomThemeProvider;","map":{"version":3,"sources":["/Users/thomasnguyen/Documents/GitHub/react-portfolio/src/components/CustomThemeProvider.js"],"names":["React","useState","useEffect","ThemeProvider","ThemeContext","themes","light","background","titleColor","nav","hoverCircle","icon","dialog","dark","shared","borderRadius","fonts","title","body","colors","primary","secondary","CustomThemeProvider","children","mode","setMode","localStorage","getItem","document","querySelector","style","theme"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA;;;;AAGA,MAAMC,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAE,uBADP;AAELC,IAAAA,UAAU,EAAE,MAFP;AAGLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,WAAW,EAAE,MADV;AAEHH,MAAAA,UAAU,EAAE,MAFT;AAGHI,MAAAA,IAAI,EAAE;AAHH,KAHA;AAQLC,IAAAA,MAAM,EAAE;AACNL,MAAAA,UAAU,EAAE;AADN;AARH,GADM;AAabM,EAAAA,IAAI,EAAE;AACJN,IAAAA,UAAU,EAAE,sBADR;AAEJC,IAAAA,UAAU,EAAE,MAFR;AAGJC,IAAAA,GAAG,EAAE;AACHC,MAAAA,WAAW,EAAE,SADV;AAEHH,MAAAA,UAAU,EAAE,SAFT;AAGHI,MAAAA,IAAI,EAAE;AAHH,KAHD;AAQJC,IAAAA,MAAM,EAAE;AACNL,MAAAA,UAAU,EAAE;AADN;AARJ;AAbO,CAAf;AA2BA;;;;AAGA,MAAMO,MAAM,GAAG;AACbC,EAAAA,YAAY,EAAE,KADD;AAEbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,yBADF;AAELC,IAAAA,IAAI,EAAE;AAFD,GAFM;AAMbC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE,gBADH;AAENC,IAAAA,SAAS,EAAE;AAFL;AANK,CAAf;;AAYA,SAASC,mBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAA2C;AACzC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAACyB,YAAY,CAACC,OAAb,CAAqB,MAArB,KAAgC,OAAjC,CAAhC;AAEAzB,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,QAAQ,CAACC,aAAT,CAAuB,MAAvB,EAA+BC,KAA/B,CAAqCvB,UAArC,GAAkDF,MAAM,CAACmB,IAAD,CAAN,CAAajB,UAA/D;AACD,GAFQ,EAEN,CAACiB,IAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,OADK;AAELD,MAAAA,IAFK;AAGLO,MAAAA,KAAK,EAAE1B,MAAM,CAACmB,IAAD;AAHR,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAAEA,MAAAA,IAAF;AAAQ,SAAGV,MAAX;AAAmB,SAAGT,MAAM,CAACmB,IAAD;AAA5B,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CAPF,CADF;AAaD;;AAED,eAAeD,mBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport ThemeContext from 'context/ThemeContext';\n\n/**\n * Light/dark themes\n */\nconst themes = {\n  light: {\n    background: 'var(--light-bg-color)',\n    titleColor: '#333',\n    nav: {\n      hoverCircle: '#ccc',\n      background: '#ddd',\n      icon: 'var(--dark-bg-color)',\n    },\n    dialog: {\n      background: 'var(--light-bg-color)',\n    },\n  },\n  dark: {\n    background: 'var(--dark-bg-color)',\n    titleColor: '#fff',\n    nav: {\n      hoverCircle: '#3c3c3c',\n      background: '#4c4c4c',\n      icon: '#fff',\n    },\n    dialog: {\n      background: '#4c4c4c',\n    },\n  },\n};\n\n/**\n * Shared styles that we want accessible in the theme provider\n */\nconst shared = {\n  borderRadius: '4px',\n  fonts: {\n    title: '\"Space Mono\", monospace',\n    body: '\"Open Sans\", sans-serif',\n  },\n  colors: {\n    primary: 'var(--primary)',\n    secondary: 'var(--secondary)',\n  },\n};\n\nfunction CustomThemeProvider({ children }) {\n  const [mode, setMode] = useState(localStorage.getItem('mode') || 'light');\n\n  useEffect(() => {\n    document.querySelector('body').style.background = themes[mode].background;\n  }, [mode]);\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        setMode,\n        mode,\n        theme: themes[mode],\n      }}\n    >\n      <ThemeProvider theme={{ mode, ...shared, ...themes[mode] }}>\n        {children}\n      </ThemeProvider>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default CustomThemeProvider;\n"]},"metadata":{},"sourceType":"module"}