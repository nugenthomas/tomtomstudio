{"ast":null,"code":"// import React, { useEffect, useState, useContext, useRef } from 'react';\n// import styled from 'styled-components';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { useSpring, animated } from 'react-spring';\n// import ThemeContext from 'context/ThemeContext';\n// import media from 'styles/media';\n// const Wrapper = styled.div`\n//   align-items: center;\n//   background: ${props => props.background};\n//   border-radius: 4px 20% 4px 20%;\n//   box-shadow: 3px 4px 5px -2px rgba(0, 0, 0, 0.33);\n//   color: #333;\n//   cursor: pointer;\n//   display: flex;\n//   font-size: 2rem;\n//   height: 100%;\n//   justify-content: center;\n//   width: 100%;\n//   ${media.phone`\n//     font-size: 1.8rem;\n//   `}\n// `;\n// const ButtonContainer = styled.div`\n//   height: 4rem;\n//   margin-right: 2rem;\n//   margin-top: 0.5rem;\n//   position: fixed;\n//   right: 0;\n//   top: 0;\n//   width: 4rem;\n//   ${media.phone`\n//     height: 3rem;\n//     margin-right: 0.5rem;\n//     width: 3rem;\n//   `}\n// `;\n// function ThemeButton() {\n//   const lastScrollTop = useRef(0);\n//   const [visibility, setVisibility] = useState(false);\n//   const theme = useContext(ThemeContext);\n//   const isLightTheme = theme.mode === 'light';\n//   const invertedTheme = () => (isLightTheme ? 'dark' : 'light');\n//   const scrollListener = () => {\n//     const position = window.pageYOffset || document.documentElement.scrollTop;\n//     /*\n//       Hide the button if scrolling down,\n//       show it if scrolling up\n//     */\n//     position > lastScrollTop.current\n//       ? setVisibility(position > 300)\n//       : setVisibility(false);\n//     lastScrollTop.current = position;\n//   };\n//   useEffect(() => {\n//     document.addEventListener('scroll', scrollListener);\n//     return () => document.removeEventListener('scroll', scrollListener);\n//   }, []);\n//   const props = useSpring({\n//     marginTop: visibility ? '-97%' : '0%',\n//   });\n//   return (\n//     <ButtonContainer>\n//       <animated.div\n//         onMouseEnter={() => setVisibility(false)}\n//         style={{ ...props, height: '100%' }}\n//       >\n//         <Wrapper\n//           onClick={() => {\n//             theme.setMode(invertedTheme());\n//             localStorage.setItem('mode', invertedTheme());\n//           }}\n//           background={`var(--${invertedTheme()}-bg-color)`}\n//         >\n//           <FontAwesomeIcon\n//             color={`var(--${isLightTheme ? 'light' : 'dark'}-bg-color)`}\n//             icon={isLightTheme ? 'moon' : 'sun'}\n//           />\n//         </Wrapper>\n//       </animated.div>\n//     </ButtonContainer>\n//   );\n// }\n// export default ThemeButton;","map":{"version":3,"sources":["/Users/thomasnguyen/Documents/GitHub/react-portfolio/src/components/ThemeButton.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useEffect, useState, useContext, useRef } from 'react';\n// import styled from 'styled-components';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { useSpring, animated } from 'react-spring';\n// import ThemeContext from 'context/ThemeContext';\n// import media from 'styles/media';\n\n// const Wrapper = styled.div`\n//   align-items: center;\n//   background: ${props => props.background};\n//   border-radius: 4px 20% 4px 20%;\n//   box-shadow: 3px 4px 5px -2px rgba(0, 0, 0, 0.33);\n//   color: #333;\n//   cursor: pointer;\n//   display: flex;\n//   font-size: 2rem;\n//   height: 100%;\n//   justify-content: center;\n//   width: 100%;\n//   ${media.phone`\n//     font-size: 1.8rem;\n//   `}\n// `;\n\n// const ButtonContainer = styled.div`\n//   height: 4rem;\n//   margin-right: 2rem;\n//   margin-top: 0.5rem;\n//   position: fixed;\n//   right: 0;\n//   top: 0;\n//   width: 4rem;\n//   ${media.phone`\n//     height: 3rem;\n//     margin-right: 0.5rem;\n//     width: 3rem;\n//   `}\n// `;\n\n// function ThemeButton() {\n//   const lastScrollTop = useRef(0);\n//   const [visibility, setVisibility] = useState(false);\n//   const theme = useContext(ThemeContext);\n//   const isLightTheme = theme.mode === 'light';\n//   const invertedTheme = () => (isLightTheme ? 'dark' : 'light');\n\n//   const scrollListener = () => {\n//     const position = window.pageYOffset || document.documentElement.scrollTop;\n//     /*\n//       Hide the button if scrolling down,\n//       show it if scrolling up\n//     */\n//     position > lastScrollTop.current\n//       ? setVisibility(position > 300)\n//       : setVisibility(false);\n//     lastScrollTop.current = position;\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('scroll', scrollListener);\n//     return () => document.removeEventListener('scroll', scrollListener);\n//   }, []);\n\n//   const props = useSpring({\n//     marginTop: visibility ? '-97%' : '0%',\n//   });\n\n//   return (\n//     <ButtonContainer>\n//       <animated.div\n//         onMouseEnter={() => setVisibility(false)}\n//         style={{ ...props, height: '100%' }}\n//       >\n//         <Wrapper\n//           onClick={() => {\n//             theme.setMode(invertedTheme());\n//             localStorage.setItem('mode', invertedTheme());\n//           }}\n//           background={`var(--${invertedTheme()}-bg-color)`}\n//         >\n//           <FontAwesomeIcon\n//             color={`var(--${isLightTheme ? 'light' : 'dark'}-bg-color)`}\n//             icon={isLightTheme ? 'moon' : 'sun'}\n//           />\n//         </Wrapper>\n//       </animated.div>\n//     </ButtonContainer>\n//   );\n// }\n\n// export default ThemeButton;\n"]},"metadata":{},"sourceType":"module"}