{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnguyen/Documents/GitHub/react-portfolio/src/components/ThemeButton.js\";\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useSpring, animated } from 'react-spring';\nimport ThemeContext from 'context/ThemeContext';\nimport media from 'styles/media';\nconst Wrapper = styled.div`\n  align-items: center;\n  background: white;\n  border-radius: 4px 20% 4px 20%;\n  box-shadow: 3px 4px 5px -2px rgba(0, 0, 0, 0.33);\n  color: #333;\n  cursor: pointer;\n  display: flex;\n  font-size: 2rem;\n  height: 100%;\n  justify-content: center;\n  width: 100%;\n  ${media.phone`\n    font-size: 1.8rem;\n  `}\n`;\nconst ButtonContainer = styled.div`\n  height: 4rem;\n  margin-right: 2rem;\n  margin-top: 0.5rem;\n  position: fixed;\n  right: 0;\n  top: 0;\n  width: 4rem;\n  ${media.phone`\n    height: 3rem;\n    margin-right: 0.5rem;\n    width: 3rem;\n  `}\n`;\n\nfunction ThemeButton() {\n  const lastScrollTop = useRef(0);\n  const [visibility, setVisibility] = useState(false);\n  const theme = useContext(ThemeContext);\n  const isLightTheme = theme.mode === 'light';\n\n  const invertedTheme = () => isLightTheme ? 'dark' : 'light';\n\n  const scrollListener = () => {\n    const position = window.pageYOffset || document.documentElement.scrollTop;\n    /*\n      Hide the button if scrolling down,\n      show it if scrolling up\n    */\n\n    position > lastScrollTop.current ? setVisibility(position > 300) : setVisibility(false);\n    lastScrollTop.current = position;\n  };\n\n  useEffect(() => {\n    document.addEventListener('scroll', scrollListener);\n    return () => document.removeEventListener('scroll', scrollListener);\n  }, []);\n  const props = useSpring({\n    marginTop: visibility ? '-97%' : '0%'\n  });\n  return /*#__PURE__*/React.createElement(ButtonContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(animated.div, {\n    onMouseEnter: () => setVisibility(false),\n    style: { ...props,\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Wrapper, {\n    onClick: () => {\n      theme.setMode(invertedTheme());\n      localStorage.setItem('mode', invertedTheme());\n    },\n    background: `var(--${invertedTheme()}-bg-color)`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    color: `var(--${isLightTheme ? 'light' : 'dark'}-bg-color)`,\n    icon: isLightTheme ? 'moon' : 'sun',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default ThemeButton;","map":{"version":3,"sources":["/Users/thomasnguyen/Documents/GitHub/react-portfolio/src/components/ThemeButton.js"],"names":["React","useEffect","useState","useContext","useRef","styled","FontAwesomeIcon","useSpring","animated","ThemeContext","media","Wrapper","div","phone","ButtonContainer","ThemeButton","lastScrollTop","visibility","setVisibility","theme","isLightTheme","mode","invertedTheme","scrollListener","position","window","pageYOffset","document","documentElement","scrollTop","current","addEventListener","removeEventListener","props","marginTop","height","setMode","localStorage","setItem"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,MAAMC,OAAO,GAAGN,MAAM,CAACO,GAAI;;;;;;;;;;;;IAYvBF,KAAK,CAACG,KAAM;;GAEZ;CAdJ;AAiBA,MAAMC,eAAe,GAAGT,MAAM,CAACO,GAAI;;;;;;;;IAQ/BF,KAAK,CAACG,KAAM;;;;GAIZ;CAZJ;;AAeA,SAASE,WAAT,GAAuB;AACrB,QAAMC,aAAa,GAAGZ,MAAM,CAAC,CAAD,CAA5B;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMiB,KAAK,GAAGhB,UAAU,CAACM,YAAD,CAAxB;AACA,QAAMW,YAAY,GAAGD,KAAK,CAACE,IAAN,KAAe,OAApC;;AACA,QAAMC,aAAa,GAAG,MAAOF,YAAY,GAAG,MAAH,GAAY,OAArD;;AAEA,QAAMG,cAAc,GAAG,MAAM;AAC3B,UAAMC,QAAQ,GAAGC,MAAM,CAACC,WAAP,IAAsBC,QAAQ,CAACC,eAAT,CAAyBC,SAAhE;AACA;;;;;AAIAL,IAAAA,QAAQ,GAAGR,aAAa,CAACc,OAAzB,GACIZ,aAAa,CAACM,QAAQ,GAAG,GAAZ,CADjB,GAEIN,aAAa,CAAC,KAAD,CAFjB;AAGAF,IAAAA,aAAa,CAACc,OAAd,GAAwBN,QAAxB;AACD,GAVD;;AAYAvB,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,QAAQ,CAACI,gBAAT,CAA0B,QAA1B,EAAoCR,cAApC;AACA,WAAO,MAAMI,QAAQ,CAACK,mBAAT,CAA6B,QAA7B,EAAuCT,cAAvC,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMU,KAAK,GAAG1B,SAAS,CAAC;AACtB2B,IAAAA,SAAS,EAAEjB,UAAU,GAAG,MAAH,GAAY;AADX,GAAD,CAAvB;AAIA,sBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD,CAAU,GAAV;AACE,IAAA,YAAY,EAAE,MAAMC,aAAa,CAAC,KAAD,CADnC;AAEE,IAAA,KAAK,EAAE,EAAE,GAAGe,KAAL;AAAYE,MAAAA,MAAM,EAAE;AAApB,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,OAAD;AACE,IAAA,OAAO,EAAE,MAAM;AACbhB,MAAAA,KAAK,CAACiB,OAAN,CAAcd,aAAa,EAA3B;AACAe,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BhB,aAAa,EAA1C;AACD,KAJH;AAKE,IAAA,UAAU,EAAG,SAAQA,aAAa,EAAG,YALvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,eAAD;AACE,IAAA,KAAK,EAAG,SAAQF,YAAY,GAAG,OAAH,GAAa,MAAO,YADlD;AAEE,IAAA,IAAI,EAAEA,YAAY,GAAG,MAAH,GAAY,KAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CAJF,CADF,CADF;AAqBD;;AAED,eAAeL,WAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useSpring, animated } from 'react-spring';\nimport ThemeContext from 'context/ThemeContext';\nimport media from 'styles/media';\n\nconst Wrapper = styled.div`\n  align-items: center;\n  background: white;\n  border-radius: 4px 20% 4px 20%;\n  box-shadow: 3px 4px 5px -2px rgba(0, 0, 0, 0.33);\n  color: #333;\n  cursor: pointer;\n  display: flex;\n  font-size: 2rem;\n  height: 100%;\n  justify-content: center;\n  width: 100%;\n  ${media.phone`\n    font-size: 1.8rem;\n  `}\n`;\n\nconst ButtonContainer = styled.div`\n  height: 4rem;\n  margin-right: 2rem;\n  margin-top: 0.5rem;\n  position: fixed;\n  right: 0;\n  top: 0;\n  width: 4rem;\n  ${media.phone`\n    height: 3rem;\n    margin-right: 0.5rem;\n    width: 3rem;\n  `}\n`;\n\nfunction ThemeButton() {\n  const lastScrollTop = useRef(0);\n  const [visibility, setVisibility] = useState(false);\n  const theme = useContext(ThemeContext);\n  const isLightTheme = theme.mode === 'light';\n  const invertedTheme = () => (isLightTheme ? 'dark' : 'light');\n\n  const scrollListener = () => {\n    const position = window.pageYOffset || document.documentElement.scrollTop;\n    /*\n      Hide the button if scrolling down,\n      show it if scrolling up\n    */\n    position > lastScrollTop.current\n      ? setVisibility(position > 300)\n      : setVisibility(false);\n    lastScrollTop.current = position;\n  };\n\n  useEffect(() => {\n    document.addEventListener('scroll', scrollListener);\n    return () => document.removeEventListener('scroll', scrollListener);\n  }, []);\n\n  const props = useSpring({\n    marginTop: visibility ? '-97%' : '0%',\n  });\n\n  return (\n    <ButtonContainer>\n      <animated.div\n        onMouseEnter={() => setVisibility(false)}\n        style={{ ...props, height: '100%' }}\n      >\n        <Wrapper\n          onClick={() => {\n            theme.setMode(invertedTheme());\n            localStorage.setItem('mode', invertedTheme());\n          }}\n          background={`var(--${invertedTheme()}-bg-color)`}\n        >\n          <FontAwesomeIcon\n            color={`var(--${isLightTheme ? 'light' : 'dark'}-bg-color)`}\n            icon={isLightTheme ? 'moon' : 'sun'}\n          />\n        </Wrapper>\n      </animated.div>\n    </ButtonContainer>\n  );\n}\n\nexport default ThemeButton;\n"]},"metadata":{},"sourceType":"module"}